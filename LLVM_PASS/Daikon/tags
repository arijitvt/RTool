!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.9~svn20110310	//
DAIKON_PASS_HH	./DaikonPass.h	6;"	d
DaikonPass	./DaikonPass.cpp	/^DaikonPass::DaikonPass():ModulePass(ID) { $/;"	f	class:DaikonPass	signature:()
DaikonPass	./DaikonPass.h	/^		DaikonPass();$/;"	p	class:DaikonPass	access:public	signature:()
DaikonPass	./DaikonPass.h	/^class DaikonPass:public ModulePass {$/;"	c	inherits:ModulePass
DaikonPass::DaikonPass	./DaikonPass.cpp	/^DaikonPass::DaikonPass():ModulePass(ID) { $/;"	f	class:DaikonPass	signature:()
DaikonPass::DaikonPass	./DaikonPass.h	/^		DaikonPass();$/;"	p	class:DaikonPass	access:public	signature:()
DaikonPass::ID	./DaikonPass.cpp	/^char DaikonPass::ID = 0;$/;"	m	class:DaikonPass	file:
DaikonPass::ID	./DaikonPass.h	/^		static char ID;$/;"	m	class:DaikonPass	access:public
DaikonPass::clapDummyVar	./DaikonPass.h	/^		Value *clapDummyVar;$/;"	m	class:DaikonPass	access:private
DaikonPass::declDumperForGlobals	./DaikonPass.cpp	/^string DaikonPass::declDumperForGlobals(Value *value ,bool EntryOrExit,Instruction *instr) {$/;"	f	class:DaikonPass	signature:(Value *value ,bool EntryOrExit,Instruction *instr)
DaikonPass::declDumperForGlobals	./DaikonPass.h	/^		string declDumperForGlobals(Value *,bool,Instruction *instr=NULL);$/;"	p	class:DaikonPass	access:private	signature:(Value *,bool,Instruction *instr=NULL)
DaikonPass::doInit	./DaikonPass.cpp	/^void DaikonPass::doInit(Module *module) {$/;"	f	class:DaikonPass	signature:(Module *module)
DaikonPass::doInit	./DaikonPass.h	/^		void doInit(Module *);$/;"	p	class:DaikonPass	access:private	signature:(Module *)
DaikonPass::doNotInstrument	./DaikonPass.cpp	/^bool DaikonPass::doNotInstrument(StringRef funcName) {$/;"	f	class:DaikonPass	signature:(StringRef funcName)
DaikonPass::doNotInstrument	./DaikonPass.h	/^		bool doNotInstrument(StringRef);$/;"	p	class:DaikonPass	access:private	signature:(StringRef)
DaikonPass::doNotInstrumentFunctions	./DaikonPass.h	/^		vector<string> 	doNotInstrumentFunctions;$/;"	m	class:DaikonPass	access:private
DaikonPass::dumpDeclFile	./DaikonPass.cpp	/^void DaikonPass::dumpDeclFile(Module &module) {$/;"	f	class:DaikonPass	signature:(Module &module)
DaikonPass::dumpDeclFile	./DaikonPass.h	/^		void dumpDeclFile(Module&);$/;"	p	class:DaikonPass	access:private	signature:(Module&)
DaikonPass::dumpDeclFileAtEntryAndExit	./DaikonPass.cpp	/^void DaikonPass::dumpDeclFileAtEntryAndExit(Function *func,string EntryOrExit, fstream &declFile) {$/;"	f	class:DaikonPass	signature:(Function *func,string EntryOrExit, fstream &declFile)
DaikonPass::dumpDeclFileAtEntryAndExit	./DaikonPass.h	/^		void dumpDeclFileAtEntryAndExit(Function*,string,fstream &);$/;"	p	class:DaikonPass	access:private	signature:(Function*,string,fstream &)
DaikonPass::dumpForHookAfterFunction	./DaikonPass.cpp	/^void DaikonPass::dumpForHookAfterFunction(fstream &declFile, string EntryOrExit,Function *func) {$/;"	f	class:DaikonPass	signature:(fstream &declFile, string EntryOrExit,Function *func)
DaikonPass::dumpForHookAfterFunction	./DaikonPass.h	/^		void dumpForHookAfterFunction(fstream&,string,Function *);$/;"	p	class:DaikonPass	access:private	signature:(fstream&,string,Function *)
DaikonPass::functionType	./DaikonPass.h	/^		FunctionType *functionType;$/;"	m	class:DaikonPass	access:private
DaikonPass::generateProgramPoints	./DaikonPass.cpp	/^void DaikonPass::generateProgramPoints(Module &module) {$/;"	f	class:DaikonPass	signature:(Module &module)
DaikonPass::generateProgramPoints	./DaikonPass.h	/^		void generateProgramPoints(Module &);$/;"	p	class:DaikonPass	access:private	signature:(Module &)
DaikonPass::getTypeString	./DaikonPass.cpp	/^string DaikonPass::getTypeString(Type *type) {$/;"	f	class:DaikonPass	signature:(Type *type)
DaikonPass::getTypeString	./DaikonPass.cpp	/^string DaikonPass::getTypeString(Value *value) {$/;"	f	class:DaikonPass	signature:(Value *value)
DaikonPass::getTypeString	./DaikonPass.h	/^		string getTypeString(Type *v);$/;"	p	class:DaikonPass	access:private	signature:(Type *v)
DaikonPass::getTypeString	./DaikonPass.h	/^		string getTypeString(Value *v);$/;"	p	class:DaikonPass	access:private	signature:(Value *v)
DaikonPass::getValueForString	./DaikonPass.cpp	/^Value* DaikonPass::getValueForString(StringRef variableName,Module *module) {$/;"	f	class:DaikonPass	signature:(StringRef variableName,Module *module)
DaikonPass::getValueForString	./DaikonPass.h	/^		Value*  getValueForString(StringRef,Module *);$/;"	p	class:DaikonPass	access:private	signature:(StringRef,Module *)
DaikonPass::globalList	./DaikonPass.h	/^		vector<Value*>  globalList;$/;"	m	class:DaikonPass	access:private
DaikonPass::hookAtFunctionEnd	./DaikonPass.cpp	/^void DaikonPass::hookAtFunctionEnd(Function *func) {$/;"	f	class:DaikonPass	signature:(Function *func)
DaikonPass::hookAtFunctionEnd	./DaikonPass.h	/^                void hookAtFunctionEnd(Function *);$/;"	p	class:DaikonPass	access:private	signature:(Function *)
DaikonPass::hookAtFunctionStart	./DaikonPass.cpp	/^void DaikonPass::hookAtFunctionStart(Function *func) {$/;"	f	class:DaikonPass	signature:(Function *func)
DaikonPass::hookAtFunctionStart	./DaikonPass.h	/^                void hookAtFunctionStart(Function *);$/;"	p	class:DaikonPass	access:private	signature:(Function *)
DaikonPass::hookForStore	./DaikonPass.cpp	/^void DaikonPass::hookForStore(Function *func) {$/;"	f	class:DaikonPass	signature:(Function *func)
DaikonPass::hookForStore	./DaikonPass.h	/^		void hookForStore(Function *);$/;"	p	class:DaikonPass	access:private	signature:(Function *)
DaikonPass::insertDynamicCallAtGlobalAccess	./DaikonPass.cpp	/^void DaikonPass::insertDynamicCallAtGlobalAccess(Function *func) {$/;"	f	class:DaikonPass	signature:(Function *func)
DaikonPass::insertDynamicCallAtGlobalAccess	./DaikonPass.h	/^		void  insertDynamicCallAtGlobalAccess(Function *);$/;"	p	class:DaikonPass	access:private	signature:(Function *)
DaikonPass::int32Type	./DaikonPass.h	/^		IntegerType *int32Type;$/;"	m	class:DaikonPass	access:private
DaikonPass::int64Type	./DaikonPass.h	/^		IntegerType *int64Type;$/;"	m	class:DaikonPass	access:private
DaikonPass::int8Type	./DaikonPass.h	/^		IntegerType *int8Type ; 	$/;"	m	class:DaikonPass	access:private
DaikonPass::isGlobal	./DaikonPass.cpp	/^bool DaikonPass::isGlobal(Value *value) {$/;"	f	class:DaikonPass	signature:(Value *value)
DaikonPass::isGlobal	./DaikonPass.h	/^		bool isGlobal(Value *);$/;"	p	class:DaikonPass	access:private	signature:(Value *)
DaikonPass::isInit	./DaikonPass.cpp	/^bool DaikonPass::isInit = false;$/;"	m	class:DaikonPass	file:
DaikonPass::isInit	./DaikonPass.h	/^		static bool isInit;$/;"	m	class:DaikonPass	access:private
DaikonPass::loadProgramPoints	./DaikonPass.cpp	/^void DaikonPass::loadProgramPoints(Module &module) {$/;"	f	class:DaikonPass	signature:(Module &module)
DaikonPass::loadProgramPoints	./DaikonPass.h	/^		void loadProgramPoints(Module &);$/;"	p	class:DaikonPass	access:private	signature:(Module &)
DaikonPass::populateGlobals	./DaikonPass.cpp	/^void DaikonPass::populateGlobals(Module &module) {$/;"	f	class:DaikonPass	signature:(Module &module)
DaikonPass::populateGlobals	./DaikonPass.h	/^		void populateGlobals(Module&);$/;"	p	class:DaikonPass	access:private	signature:(Module&)
DaikonPass::programPoints	./DaikonPass.h	/^		vector<string> programPoints;$/;"	m	class:DaikonPass	access:private
DaikonPass::ptr32Type	./DaikonPass.h	/^		PointerType *ptr32Type;$/;"	m	class:DaikonPass	access:private
DaikonPass::ptr64Type	./DaikonPass.h	/^		PointerType *ptr64Type;$/;"	m	class:DaikonPass	access:private
DaikonPass::ptr8Type	./DaikonPass.h	/^		PointerType *ptr8Type ; $/;"	m	class:DaikonPass	access:private
DaikonPass::putTabInFile	./DaikonPass.cpp	/^void DaikonPass::putTabInFile(fstream &stream, int tabCount) {$/;"	f	class:DaikonPass	signature:(fstream &stream, int tabCount)
DaikonPass::putTabInFile	./DaikonPass.h	/^		void putTabInFile(fstream &,int);$/;"	p	class:DaikonPass	access:private	signature:(fstream &,int)
DaikonPass::runOnModule	./DaikonPass.cpp	/^bool DaikonPass::runOnModule(Module &module) {$/;"	f	class:DaikonPass	signature:(Module &module)
DaikonPass::runOnModule	./DaikonPass.h	/^		virtual bool runOnModule(Module &module);$/;"	p	class:DaikonPass	access:public	signature:(Module &module)
DaikonPass::testMethod	./DaikonPass.cpp	/^void DaikonPass::testMethod(Module &module) {$/;"	f	class:DaikonPass	signature:(Module &module)
DaikonPass::testMethod	./DaikonPass.h	/^		void testMethod(Module&);$/;"	p	class:DaikonPass	access:private	signature:(Module&)
DaikonPass::voidType	./DaikonPass.h	/^		Type *voidType ;$/;"	m	class:DaikonPass	access:private
DummyVarInsertionPass	./DaikonPass.cpp	/^DummyVarInsertionPass::DummyVarInsertionPass():ModulePass(ID) {$/;"	f	class:DummyVarInsertionPass	signature:()
DummyVarInsertionPass	./DaikonPass.h	/^	DummyVarInsertionPass();$/;"	p	class:DummyVarInsertionPass	access:public	signature:()
DummyVarInsertionPass	./DaikonPass.h	/^class DummyVarInsertionPass:public ModulePass {$/;"	c	inherits:ModulePass
DummyVarInsertionPass::DummyVarInsertionPass	./DaikonPass.cpp	/^DummyVarInsertionPass::DummyVarInsertionPass():ModulePass(ID) {$/;"	f	class:DummyVarInsertionPass	signature:()
DummyVarInsertionPass::DummyVarInsertionPass	./DaikonPass.h	/^	DummyVarInsertionPass();$/;"	p	class:DummyVarInsertionPass	access:public	signature:()
DummyVarInsertionPass::ID	./DaikonPass.cpp	/^char DummyVarInsertionPass::ID = 0;$/;"	m	class:DummyVarInsertionPass	file:
DummyVarInsertionPass::ID	./DaikonPass.h	/^	static char ID;$/;"	m	class:DummyVarInsertionPass	access:public
DummyVarInsertionPass::runOnModule	./DaikonPass.cpp	/^bool DummyVarInsertionPass::runOnModule(Module &module) {$/;"	f	class:DummyVarInsertionPass	signature:(Module &module)
DummyVarInsertionPass::runOnModule	./DaikonPass.h	/^	virtual bool runOnModule(Module&);$/;"	p	class:DummyVarInsertionPass	access:public	signature:(Module&)
HOOK_H	./hook.h	2;"	d
ID	./DaikonPass.cpp	/^char DaikonPass::ID = 0;$/;"	m	class:DaikonPass	file:
ID	./DaikonPass.cpp	/^char DummyVarInsertionPass::ID = 0;$/;"	m	class:DummyVarInsertionPass	file:
ID	./DaikonPass.h	/^		static char ID;$/;"	m	class:DaikonPass	access:public
ID	./DaikonPass.h	/^	static char ID;$/;"	m	class:DummyVarInsertionPass	access:public
clapDummyVar	./DaikonPass.h	/^		Value *clapDummyVar;$/;"	m	class:DaikonPass	access:private
counter	./DaikonPass.cpp	/^static int counter = 0 ;$/;"	v	file:
declDumperForGlobals	./DaikonPass.cpp	/^string DaikonPass::declDumperForGlobals(Value *value ,bool EntryOrExit,Instruction *instr) {$/;"	f	class:DaikonPass	signature:(Value *value ,bool EntryOrExit,Instruction *instr)
declDumperForGlobals	./DaikonPass.h	/^		string declDumperForGlobals(Value *,bool,Instruction *instr=NULL);$/;"	p	class:DaikonPass	access:private	signature:(Value *,bool,Instruction *instr=NULL)
doInit	./DaikonPass.cpp	/^void DaikonPass::doInit(Module *module) {$/;"	f	class:DaikonPass	signature:(Module *module)
doInit	./DaikonPass.h	/^		void doInit(Module *);$/;"	p	class:DaikonPass	access:private	signature:(Module *)
doNotInstrument	./DaikonPass.cpp	/^bool DaikonPass::doNotInstrument(StringRef funcName) {$/;"	f	class:DaikonPass	signature:(StringRef funcName)
doNotInstrument	./DaikonPass.h	/^		bool doNotInstrument(StringRef);$/;"	p	class:DaikonPass	access:private	signature:(StringRef)
doNotInstrumentFunctions	./DaikonPass.h	/^		vector<string> 	doNotInstrumentFunctions;$/;"	m	class:DaikonPass	access:private
do_nothing	./hook.h	/^extern void do_nothing();$/;"	p	signature:()
dumpDeclFile	./DaikonPass.cpp	/^void DaikonPass::dumpDeclFile(Module &module) {$/;"	f	class:DaikonPass	signature:(Module &module)
dumpDeclFile	./DaikonPass.h	/^		void dumpDeclFile(Module&);$/;"	p	class:DaikonPass	access:private	signature:(Module&)
dumpDeclFileAtEntryAndExit	./DaikonPass.cpp	/^void DaikonPass::dumpDeclFileAtEntryAndExit(Function *func,string EntryOrExit, fstream &declFile) {$/;"	f	class:DaikonPass	signature:(Function *func,string EntryOrExit, fstream &declFile)
dumpDeclFileAtEntryAndExit	./DaikonPass.h	/^		void dumpDeclFileAtEntryAndExit(Function*,string,fstream &);$/;"	p	class:DaikonPass	access:private	signature:(Function*,string,fstream &)
dumpForHookAfterFunction	./DaikonPass.cpp	/^void DaikonPass::dumpForHookAfterFunction(fstream &declFile, string EntryOrExit,Function *func) {$/;"	f	class:DaikonPass	signature:(fstream &declFile, string EntryOrExit,Function *func)
dumpForHookAfterFunction	./DaikonPass.h	/^		void dumpForHookAfterFunction(fstream&,string,Function *);$/;"	p	class:DaikonPass	access:private	signature:(fstream&,string,Function *)
functionType	./DaikonPass.h	/^		FunctionType *functionType;$/;"	m	class:DaikonPass	access:private
generateProgramPoints	./DaikonPass.cpp	/^void DaikonPass::generateProgramPoints(Module &module) {$/;"	f	class:DaikonPass	signature:(Module &module)
generateProgramPoints	./DaikonPass.h	/^		void generateProgramPoints(Module &);$/;"	p	class:DaikonPass	access:private	signature:(Module &)
getDebugFilename	./FileInfo.cpp	/^StringRef getDebugFilename(Instruction *inst) {$/;"	f	signature:(Instruction *inst)
getDebugLineNum	./FileInfo.cpp	/^unsigned getDebugLineNum(Instruction *inst) {$/;"	f	signature:(Instruction *inst)
getDebugLineNum	./FileInfo.h	/^unsigned getDebugLineNum(Instruction *inst);$/;"	p	signature:(Instruction *inst)
getModuleName	./FileInfo.cpp	/^StringRef getModuleName(Module &module) {$/;"	f	signature:(Module &module)
getModuleName	./FileInfo.h	/^StringRef getModuleName(Module &module);$/;"	p	signature:(Module &module)
getTypeString	./DaikonPass.cpp	/^string DaikonPass::getTypeString(Type *type) {$/;"	f	class:DaikonPass	signature:(Type *type)
getTypeString	./DaikonPass.cpp	/^string DaikonPass::getTypeString(Value *value) {$/;"	f	class:DaikonPass	signature:(Value *value)
getTypeString	./DaikonPass.h	/^		string getTypeString(Type *v);$/;"	p	class:DaikonPass	access:private	signature:(Type *v)
getTypeString	./DaikonPass.h	/^		string getTypeString(Value *v);$/;"	p	class:DaikonPass	access:private	signature:(Value *v)
getValueForString	./DaikonPass.cpp	/^Value* DaikonPass::getValueForString(StringRef variableName,Module *module) {$/;"	f	class:DaikonPass	signature:(StringRef variableName,Module *module)
getValueForString	./DaikonPass.h	/^		Value*  getValueForString(StringRef,Module *);$/;"	p	class:DaikonPass	access:private	signature:(StringRef,Module *)
globalList	./DaikonPass.h	/^		vector<Value*>  globalList;$/;"	m	class:DaikonPass	access:private
hookAtFunctionEnd	./DaikonPass.cpp	/^void DaikonPass::hookAtFunctionEnd(Function *func) {$/;"	f	class:DaikonPass	signature:(Function *func)
hookAtFunctionEnd	./DaikonPass.h	/^                void hookAtFunctionEnd(Function *);$/;"	p	class:DaikonPass	access:private	signature:(Function *)
hookAtFunctionStart	./DaikonPass.cpp	/^void DaikonPass::hookAtFunctionStart(Function *func) {$/;"	f	class:DaikonPass	signature:(Function *func)
hookAtFunctionStart	./DaikonPass.h	/^                void hookAtFunctionStart(Function *);$/;"	p	class:DaikonPass	access:private	signature:(Function *)
hookForStore	./DaikonPass.cpp	/^void DaikonPass::hookForStore(Function *func) {$/;"	f	class:DaikonPass	signature:(Function *func)
hookForStore	./DaikonPass.h	/^		void hookForStore(Function *);$/;"	p	class:DaikonPass	access:private	signature:(Function *)
hook_assert	./hook.h	8;"	d
insertDynamicCallAtGlobalAccess	./DaikonPass.cpp	/^void DaikonPass::insertDynamicCallAtGlobalAccess(Function *func) {$/;"	f	class:DaikonPass	signature:(Function *func)
insertDynamicCallAtGlobalAccess	./DaikonPass.h	/^		void  insertDynamicCallAtGlobalAccess(Function *);$/;"	p	class:DaikonPass	access:private	signature:(Function *)
int32Type	./DaikonPass.h	/^		IntegerType *int32Type;$/;"	m	class:DaikonPass	access:private
int64Type	./DaikonPass.h	/^		IntegerType *int64Type;$/;"	m	class:DaikonPass	access:private
int8Type	./DaikonPass.h	/^		IntegerType *int8Type ; 	$/;"	m	class:DaikonPass	access:private
isGlobal	./DaikonPass.cpp	/^bool DaikonPass::isGlobal(Value *value) {$/;"	f	class:DaikonPass	signature:(Value *value)
isGlobal	./DaikonPass.h	/^		bool isGlobal(Value *);$/;"	p	class:DaikonPass	access:private	signature:(Value *)
isInit	./DaikonPass.cpp	/^bool DaikonPass::isInit = false;$/;"	m	class:DaikonPass	file:
isInit	./DaikonPass.h	/^		static bool isInit;$/;"	m	class:DaikonPass	access:private
loadProgramPoints	./DaikonPass.cpp	/^void DaikonPass::loadProgramPoints(Module &module) {$/;"	f	class:DaikonPass	signature:(Module &module)
loadProgramPoints	./DaikonPass.h	/^		void loadProgramPoints(Module &);$/;"	p	class:DaikonPass	access:private	signature:(Module &)
populateGlobals	./DaikonPass.cpp	/^void DaikonPass::populateGlobals(Module &module) {$/;"	f	class:DaikonPass	signature:(Module &module)
populateGlobals	./DaikonPass.h	/^		void populateGlobals(Module&);$/;"	p	class:DaikonPass	access:private	signature:(Module&)
programPoints	./DaikonPass.h	/^		vector<string> programPoints;$/;"	m	class:DaikonPass	access:private
ptr32Type	./DaikonPass.h	/^		PointerType *ptr32Type;$/;"	m	class:DaikonPass	access:private
ptr64Type	./DaikonPass.h	/^		PointerType *ptr64Type;$/;"	m	class:DaikonPass	access:private
ptr8Type	./DaikonPass.h	/^		PointerType *ptr8Type ; $/;"	m	class:DaikonPass	access:private
putTabInFile	./DaikonPass.cpp	/^void DaikonPass::putTabInFile(fstream &stream, int tabCount) {$/;"	f	class:DaikonPass	signature:(fstream &stream, int tabCount)
putTabInFile	./DaikonPass.h	/^		void putTabInFile(fstream &,int);$/;"	p	class:DaikonPass	access:private	signature:(fstream &,int)
runOnModule	./DaikonPass.cpp	/^bool DaikonPass::runOnModule(Module &module) {$/;"	f	class:DaikonPass	signature:(Module &module)
runOnModule	./DaikonPass.cpp	/^bool DummyVarInsertionPass::runOnModule(Module &module) {$/;"	f	class:DummyVarInsertionPass	signature:(Module &module)
runOnModule	./DaikonPass.h	/^		virtual bool runOnModule(Module &module);$/;"	p	class:DaikonPass	access:public	signature:(Module &module)
runOnModule	./DaikonPass.h	/^	virtual bool runOnModule(Module&);$/;"	p	class:DummyVarInsertionPass	access:public	signature:(Module&)
testMethod	./DaikonPass.cpp	/^void DaikonPass::testMethod(Module &module) {$/;"	f	class:DaikonPass	signature:(Module &module)
testMethod	./DaikonPass.h	/^		void testMethod(Module&);$/;"	p	class:DaikonPass	access:private	signature:(Module&)
voidType	./DaikonPass.h	/^		Type *voidType ;$/;"	m	class:DaikonPass	access:private
write_assert_failure_trace	./hook.h	/^extern void write_assert_failure_trace();$/;"	p	signature:()
